"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/cluster/route";
exports.ids = ["app/api/cluster/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcluster%2Froute&page=%2Fapi%2Fcluster%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcluster%2Froute.ts&appDir=C%3A%5CUsers%5CSANJAY%5CDownloads%5CDharmik%5CDHV%5CDHV-project-2%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CSANJAY%5CDownloads%5CDharmik%5CDHV%5CDHV-project-2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcluster%2Froute&page=%2Fapi%2Fcluster%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcluster%2Froute.ts&appDir=C%3A%5CUsers%5CSANJAY%5CDownloads%5CDharmik%5CDHV%5CDHV-project-2%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CSANJAY%5CDownloads%5CDharmik%5CDHV%5CDHV-project-2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_SANJAY_Downloads_Dharmik_DHV_DHV_project_2_app_api_cluster_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/cluster/route.ts */ \"(rsc)/./app/api/cluster/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/cluster/route\",\n        pathname: \"/api/cluster\",\n        filename: \"route\",\n        bundlePath: \"app/api/cluster/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\SANJAY\\\\Downloads\\\\Dharmik\\\\DHV\\\\DHV-project-2\\\\app\\\\api\\\\cluster\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_SANJAY_Downloads_Dharmik_DHV_DHV_project_2_app_api_cluster_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/cluster/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjbHVzdGVyJTJGcm91dGUmcGFnZT0lMkZhcGklMkZjbHVzdGVyJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2x1c3RlciUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNTQU5KQVklNUNEb3dubG9hZHMlNUNEaGFybWlrJTVDREhWJTVDREhWLXByb2plY3QtMiU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDU0FOSkFZJTVDRG93bmxvYWRzJTVDRGhhcm1payU1Q0RIViU1Q0RIVi1wcm9qZWN0LTImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3NDO0FBQ25IO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGllcmFyY2hpY2FsLWNsdXN0ZXJpbmctdmlzdWFsaXphdGlvbi8/ZTE5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxTQU5KQVlcXFxcRG93bmxvYWRzXFxcXERoYXJtaWtcXFxcREhWXFxcXERIVi1wcm9qZWN0LTJcXFxcYXBwXFxcXGFwaVxcXFxjbHVzdGVyXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jbHVzdGVyL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2x1c3RlclwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2x1c3Rlci9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXFNBTkpBWVxcXFxEb3dubG9hZHNcXFxcRGhhcm1pa1xcXFxESFZcXFxcREhWLXByb2plY3QtMlxcXFxhcHBcXFxcYXBpXFxcXGNsdXN0ZXJcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2NsdXN0ZXIvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcluster%2Froute&page=%2Fapi%2Fcluster%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcluster%2Froute.ts&appDir=C%3A%5CUsers%5CSANJAY%5CDownloads%5CDharmik%5CDHV%5CDHV-project-2%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CSANJAY%5CDownloads%5CDharmik%5CDHV%5CDHV-project-2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/cluster/route.ts":
/*!**********************************!*\
  !*** ./app/api/cluster/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _shared_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/schema */ \"(rsc)/./shared/schema.ts\");\n/* harmony import */ var _lib_clustering__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/clustering */ \"(rsc)/./app/lib/clustering.ts\");\n\n\n\nasync function POST(req) {\n    try {\n        const body = await req.json();\n        const { algorithm, dataPoints } = _shared_schema__WEBPACK_IMPORTED_MODULE_1__.clusterRequestSchema.parse(body);\n        const points = dataPoints.map((dp, idx)=>({\n                id: dp.data?.Patient_ID || dp.data?.Crime_ID || dp.data?.Customer_ID || `Point${idx}`,\n                x: dp.x,\n                y: dp.y,\n                data: dp.data\n            }));\n        const result = algorithm === \"agglomerative\" ? (0,_lib_clustering__WEBPACK_IMPORTED_MODULE_2__.agglomerativeClustering)(points) : (0,_lib_clustering__WEBPACK_IMPORTED_MODULE_2__.divisiveClustering)(points);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            steps: result.steps,\n            finalClusters: result.finalClusters,\n            dendrogram: result.dendrogram\n        });\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error?.message || \"Failed to perform clustering\"\n        }, {\n            status: 400\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2NsdXN0ZXIvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNGO0FBQzZCO0FBRTVFLGVBQWVJLEtBQUtDLEdBQWdCO0lBQ3pDLElBQUk7UUFDRixNQUFNQyxPQUFPLE1BQU1ELElBQUlFLElBQUk7UUFDM0IsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFVBQVUsRUFBRSxHQUFHUixnRUFBb0JBLENBQUNTLEtBQUssQ0FBQ0o7UUFFN0QsTUFBTUssU0FBU0YsV0FBV0csR0FBRyxDQUFDLENBQUNDLElBQVNDLE1BQWlCO2dCQUN2REMsSUFBSUYsR0FBR0csSUFBSSxFQUFFQyxjQUFjSixHQUFHRyxJQUFJLEVBQUVFLFlBQVlMLEdBQUdHLElBQUksRUFBRUcsZUFBZSxDQUFDLEtBQUssRUFBRUwsSUFBSSxDQUFDO2dCQUNyRk0sR0FBR1AsR0FBR08sQ0FBQztnQkFDUEMsR0FBR1IsR0FBR1EsQ0FBQztnQkFDUEwsTUFBTUgsR0FBR0csSUFBSTtZQUNmO1FBRUEsTUFBTU0sU0FBU2QsY0FBYyxrQkFDekJOLHdFQUF1QkEsQ0FBQ1MsVUFDeEJSLG1FQUFrQkEsQ0FBQ1E7UUFFdkIsT0FBT1gscURBQVlBLENBQUNPLElBQUksQ0FBQztZQUN2QmdCLFNBQVM7WUFDVEMsT0FBT0YsT0FBT0UsS0FBSztZQUNuQkMsZUFBZUgsT0FBT0csYUFBYTtZQUNuQ0MsWUFBWUosT0FBT0ksVUFBVTtRQUMvQjtJQUNGLEVBQUUsT0FBT0MsT0FBWTtRQUNuQixPQUFPM0IscURBQVlBLENBQUNPLElBQUksQ0FDdEI7WUFBRWdCLFNBQVM7WUFBT0ksT0FBT0EsT0FBT0MsV0FBVztRQUErQixHQUMxRTtZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2hpZXJhcmNoaWNhbC1jbHVzdGVyaW5nLXZpc3VhbGl6YXRpb24vLi9hcHAvYXBpL2NsdXN0ZXIvcm91dGUudHM/MzNmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCI7XHJcbmltcG9ydCB7IGNsdXN0ZXJSZXF1ZXN0U2NoZW1hIH0gZnJvbSBcIkBzaGFyZWQvc2NoZW1hXCI7XHJcbmltcG9ydCB7IGFnZ2xvbWVyYXRpdmVDbHVzdGVyaW5nLCBkaXZpc2l2ZUNsdXN0ZXJpbmcgfSBmcm9tIFwiLi4vLi4vbGliL2NsdXN0ZXJpbmdcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcTogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcS5qc29uKCk7XHJcbiAgICBjb25zdCB7IGFsZ29yaXRobSwgZGF0YVBvaW50cyB9ID0gY2x1c3RlclJlcXVlc3RTY2hlbWEucGFyc2UoYm9keSk7XHJcblxyXG4gICAgY29uc3QgcG9pbnRzID0gZGF0YVBvaW50cy5tYXAoKGRwOiBhbnksIGlkeDogbnVtYmVyKSA9PiAoe1xyXG4gICAgICBpZDogZHAuZGF0YT8uUGF0aWVudF9JRCB8fCBkcC5kYXRhPy5DcmltZV9JRCB8fCBkcC5kYXRhPy5DdXN0b21lcl9JRCB8fCBgUG9pbnQke2lkeH1gLFxyXG4gICAgICB4OiBkcC54LFxyXG4gICAgICB5OiBkcC55LFxyXG4gICAgICBkYXRhOiBkcC5kYXRhLFxyXG4gICAgfSkpO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGFsZ29yaXRobSA9PT0gXCJhZ2dsb21lcmF0aXZlXCJcclxuICAgICAgPyBhZ2dsb21lcmF0aXZlQ2x1c3RlcmluZyhwb2ludHMpXHJcbiAgICAgIDogZGl2aXNpdmVDbHVzdGVyaW5nKHBvaW50cyk7XHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgc3RlcHM6IHJlc3VsdC5zdGVwcyxcclxuICAgICAgZmluYWxDbHVzdGVyczogcmVzdWx0LmZpbmFsQ2x1c3RlcnMsXHJcbiAgICAgIGRlbmRyb2dyYW06IHJlc3VsdC5kZW5kcm9ncmFtLFxyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3I/Lm1lc3NhZ2UgfHwgXCJGYWlsZWQgdG8gcGVyZm9ybSBjbHVzdGVyaW5nXCIgfSxcclxuICAgICAgeyBzdGF0dXM6IDQwMCB9LFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJjbHVzdGVyUmVxdWVzdFNjaGVtYSIsImFnZ2xvbWVyYXRpdmVDbHVzdGVyaW5nIiwiZGl2aXNpdmVDbHVzdGVyaW5nIiwiUE9TVCIsInJlcSIsImJvZHkiLCJqc29uIiwiYWxnb3JpdGhtIiwiZGF0YVBvaW50cyIsInBhcnNlIiwicG9pbnRzIiwibWFwIiwiZHAiLCJpZHgiLCJpZCIsImRhdGEiLCJQYXRpZW50X0lEIiwiQ3JpbWVfSUQiLCJDdXN0b21lcl9JRCIsIngiLCJ5IiwicmVzdWx0Iiwic3VjY2VzcyIsInN0ZXBzIiwiZmluYWxDbHVzdGVycyIsImRlbmRyb2dyYW0iLCJlcnJvciIsIm1lc3NhZ2UiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/cluster/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/clustering.ts":
/*!*******************************!*\
  !*** ./app/lib/clustering.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   agglomerativeClustering: () => (/* binding */ agglomerativeClustering),\n/* harmony export */   divisiveClustering: () => (/* binding */ divisiveClustering),\n/* harmony export */   euclideanDistance: () => (/* binding */ euclideanDistance)\n/* harmony export */ });\n// Calculate Euclidean distance between two points\nfunction euclideanDistance(p1, p2) {\n    return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n}\n// Calculate distance between two clusters (average linkage)\nfunction clusterDistance(c1, c2, points) {\n    let totalDistance = 0;\n    let count = 0;\n    for (const i of c1.points){\n        for (const j of c2.points){\n            if (points[i] && points[j]) {\n                totalDistance += euclideanDistance(points[i], points[j]);\n                count++;\n            }\n        }\n    }\n    return count > 0 ? totalDistance / count : Infinity;\n}\n// Get cluster center\nfunction getClusterCenter(cluster, points) {\n    let sumX = 0;\n    let sumY = 0;\n    let count = 0;\n    for (const idx of cluster.points){\n        if (points[idx]) {\n            sumX += points[idx].x;\n            sumY += points[idx].y;\n            count++;\n        }\n    }\n    return count > 0 ? {\n        x: sumX / count,\n        y: sumY / count\n    } : {\n        x: 0,\n        y: 0\n    };\n}\n// Agglomerative (Bottom-Up) Hierarchical Clustering\nfunction agglomerativeClustering(points) {\n    const steps = [];\n    // Initialize: each point is its own cluster\n    let clusters = points.map((p, idx)=>({\n            points: [\n                idx\n            ],\n            center: {\n                x: p.x,\n                y: p.y\n            }\n        }));\n    let stepNumber = 0;\n    // Record initial state\n    steps.push({\n        stepNumber: stepNumber++,\n        description: `All ${points.length} points start as individual clusters`,\n        cluster1: [],\n        cluster2: [],\n        mergedCluster: [],\n        distance: 0,\n        action: \"connect\"\n    });\n    // Build distance matrix for efficiency\n    const distanceMatrix = [];\n    for(let i = 0; i < points.length; i++){\n        distanceMatrix[i] = [];\n        for(let j = 0; j < points.length; j++){\n            if (i === j) {\n                distanceMatrix[i][j] = 0;\n            } else {\n                distanceMatrix[i][j] = euclideanDistance(points[i], points[j]);\n            }\n        }\n    }\n    // Track which clusters are still active\n    const activeClusters = new Set();\n    for(let i = 0; i < clusters.length; i++){\n        activeClusters.add(i);\n    }\n    // Merge until we have one cluster\n    while(activeClusters.size > 1){\n        // Find the two closest clusters\n        let minDistance = Infinity;\n        let mergeI = -1;\n        let mergeJ = -1;\n        const activeArray = Array.from(activeClusters);\n        for(let i = 0; i < activeArray.length; i++){\n            for(let j = i + 1; j < activeArray.length; j++){\n                const clusterI = activeArray[i];\n                const clusterJ = activeArray[j];\n                const dist = clusterDistance(clusters[clusterI], clusters[clusterJ], points);\n                if (dist < minDistance) {\n                    minDistance = dist;\n                    mergeI = clusterI;\n                    mergeJ = clusterJ;\n                }\n            }\n        }\n        if (mergeI === -1 || mergeJ === -1) break;\n        const cluster1 = clusters[mergeI];\n        const cluster2 = clusters[mergeJ];\n        // Merge the clusters\n        const mergedPoints = [\n            ...cluster1.points,\n            ...cluster2.points\n        ];\n        const mergedCluster = {\n            points: mergedPoints,\n            center: {\n                x: 0,\n                y: 0\n            }\n        };\n        mergedCluster.center = getClusterCenter(mergedCluster, points);\n        // Record this step\n        const action = cluster1.points.length === 1 && cluster2.points.length === 1 ? \"connect\" : \"merge\";\n        steps.push({\n            stepNumber: stepNumber++,\n            description: action === \"connect\" ? `Connecting ${points[cluster1.points[0]]?.id} and ${points[cluster2.points[0]]?.id} (distance: ${minDistance.toFixed(2)})` : `Merging cluster of ${cluster1.points.length} with cluster of ${cluster2.points.length} (distance: ${minDistance.toFixed(2)})`,\n            cluster1: cluster1.points,\n            cluster2: cluster2.points,\n            mergedCluster: mergedPoints,\n            distance: minDistance,\n            action\n        });\n        // Update clusters array\n        clusters.push(mergedCluster);\n        const newClusterIndex = clusters.length - 1;\n        // Remove old clusters from active set and add new one\n        activeClusters.delete(mergeI);\n        activeClusters.delete(mergeJ);\n        activeClusters.add(newClusterIndex);\n    }\n    steps.push({\n        stepNumber: stepNumber++,\n        description: \"Clustering complete - all points merged into one cluster\",\n        cluster1: [],\n        cluster2: [],\n        mergedCluster: clusters[clusters.length - 1]?.points || [],\n        distance: 0,\n        action: \"complete\"\n    });\n    // Build dendrogram tree\n    const dendrogram = buildDendrogram(steps, points);\n    return {\n        steps,\n        dendrogram,\n        finalClusters: getFinalClusters(steps, points.length, 3)\n    };\n}\n// Divisive (Top-Down) Hierarchical Clustering\nfunction divisiveClustering(points) {\n    const steps = [];\n    // Start with all points in one cluster\n    let clusters = [\n        {\n            points: Array.from({\n                length: points.length\n            }, (_, i)=>i),\n            center: {\n                x: 0,\n                y: 0\n            }\n        }\n    ];\n    clusters[0].center = getClusterCenter(clusters[0], points);\n    let stepNumber = 0;\n    // Record initial state\n    steps.push({\n        stepNumber: stepNumber++,\n        description: `All ${points.length} points start in one large cluster`,\n        cluster1: [],\n        cluster2: [],\n        mergedCluster: Array.from({\n            length: points.length\n        }, (_, i)=>i),\n        distance: 0,\n        action: \"connect\"\n    });\n    // Divide until each cluster has reasonable size\n    while(clusters.length < Math.min(points.length, 4)){\n        // Find the largest cluster to split\n        let maxSize = 0;\n        let splitIdx = 0;\n        clusters.forEach((cluster, idx)=>{\n            if (cluster.points.length > maxSize) {\n                maxSize = cluster.points.length;\n                splitIdx = idx;\n            }\n        });\n        if (clusters[splitIdx].points.length <= 1) break;\n        // Split using k-means (k=2) on this cluster\n        const clusterToSplit = clusters[splitIdx];\n        const { cluster1, cluster2 } = splitCluster(clusterToSplit, points);\n        if (cluster1.points.length === 0 || cluster2.points.length === 0) break;\n        steps.push({\n            stepNumber: stepNumber++,\n            description: `Dividing cluster of ${clusterToSplit.points.length} into ${cluster1.points.length} and ${cluster2.points.length}`,\n            cluster1: cluster1.points,\n            cluster2: cluster2.points,\n            mergedCluster: clusterToSplit.points,\n            distance: euclideanDistance(cluster1.center, cluster2.center),\n            action: \"merge\"\n        });\n        // Replace the split cluster with two new clusters\n        clusters.splice(splitIdx, 1, cluster1, cluster2);\n    }\n    steps.push({\n        stepNumber: stepNumber++,\n        description: \"Clustering complete - all clusters divided\",\n        cluster1: [],\n        cluster2: [],\n        mergedCluster: [],\n        distance: 0,\n        action: \"complete\"\n    });\n    // Build dendrogram for divisive clustering\n    const dendrogram = buildDivisiveDendrogram(steps, points);\n    return {\n        steps,\n        dendrogram,\n        finalClusters: clusters.map((c)=>c.points)\n    };\n}\n// Split a cluster into two using k-means (k=2)\nfunction splitCluster(cluster, points) {\n    if (cluster.points.length <= 1) {\n        return {\n            cluster1: cluster,\n            cluster2: {\n                points: [],\n                center: {\n                    x: 0,\n                    y: 0\n                }\n            }\n        };\n    }\n    // Initialize two centroids randomly from cluster points\n    const indices = cluster.points;\n    const c1Idx = indices[0];\n    const c2Idx = indices[Math.floor(indices.length / 2)];\n    let centroid1 = {\n        ...points[c1Idx]\n    };\n    let centroid2 = {\n        ...points[c2Idx]\n    };\n    let assignment = new Array(points.length).fill(0);\n    let changed = true;\n    let iterations = 0;\n    // Run k-means for a few iterations\n    while(changed && iterations < 10){\n        changed = false;\n        iterations++;\n        // Assign points to nearest centroid\n        for (const idx of indices){\n            if (!points[idx]) continue;\n            const dist1 = euclideanDistance(points[idx], centroid1);\n            const dist2 = euclideanDistance(points[idx], centroid2);\n            const newAssignment = dist1 < dist2 ? 0 : 1;\n            if (assignment[idx] !== newAssignment) {\n                assignment[idx] = newAssignment;\n                changed = true;\n            }\n        }\n        // Update centroids\n        const group1 = indices.filter((idx)=>assignment[idx] === 0);\n        const group2 = indices.filter((idx)=>assignment[idx] === 1);\n        if (group1.length > 0) {\n            centroid1 = {\n                x: group1.reduce((sum, idx)=>sum + points[idx].x, 0) / group1.length,\n                y: group1.reduce((sum, idx)=>sum + points[idx].y, 0) / group1.length,\n                id: \"\",\n                data: null\n            };\n        }\n        if (group2.length > 0) {\n            centroid2 = {\n                x: group2.reduce((sum, idx)=>sum + points[idx].x, 0) / group2.length,\n                y: group2.reduce((sum, idx)=>sum + points[idx].y, 0) / group2.length,\n                id: \"\",\n                data: null\n            };\n        }\n    }\n    const group1 = indices.filter((idx)=>assignment[idx] === 0);\n    const group2 = indices.filter((idx)=>assignment[idx] === 1);\n    return {\n        cluster1: {\n            points: group1,\n            center: centroid1\n        },\n        cluster2: {\n            points: group2,\n            center: centroid2\n        }\n    };\n}\n// Get final clusters from steps\nfunction getFinalClusters(steps, numPoints, targetClusters) {\n    if (steps.length === 0) {\n        return [\n            Array.from({\n                length: numPoints\n            }, (_, i)=>i)\n        ];\n    }\n    // Get clusters at a specific step that gives us close to targetClusters\n    const targetStep = Math.max(0, steps.length - targetClusters - 1);\n    // Track which points belong to which cluster\n    const pointToCluster = new Map();\n    const clusters = new Map();\n    // Initialize each point as its own cluster\n    for(let i = 0; i < numPoints; i++){\n        pointToCluster.set(i, i);\n        clusters.set(i, new Set([\n            i\n        ]));\n    }\n    // Apply merges up to targetStep\n    for(let i = 0; i < Math.min(targetStep, steps.length); i++){\n        const step = steps[i];\n        if (step.action === \"complete\") continue;\n        const cluster1Id = pointToCluster.get(step.cluster1[0]);\n        const cluster2Id = pointToCluster.get(step.cluster2[0]);\n        if (cluster1Id === undefined || cluster2Id === undefined) continue;\n        const cluster1Points = clusters.get(cluster1Id);\n        const cluster2Points = clusters.get(cluster2Id);\n        if (!cluster1Points || !cluster2Points) continue;\n        // Merge cluster2 into cluster1\n        cluster2Points.forEach((point)=>{\n            cluster1Points.add(point);\n            pointToCluster.set(point, cluster1Id);\n        });\n        clusters.delete(cluster2Id);\n    }\n    // Convert to array format\n    return Array.from(clusters.values()).map((cluster)=>Array.from(cluster));\n}\n// Build dendrogram tree for agglomerative clustering\nfunction buildDendrogram(steps, points) {\n    if (steps.length === 0) return null;\n    // Create leaf nodes for each point\n    const leafNodes = points.map((p, idx)=>({\n            height: 0,\n            label: p.id,\n            indices: [\n                idx\n            ]\n        }));\n    // Track which nodes are still active\n    const activeNodes = new Map();\n    leafNodes.forEach((node, idx)=>{\n        activeNodes.set(`leaf_${idx}`, node);\n    });\n    // Process merge steps to build the tree\n    for(let i = 1; i < steps.length - 1; i++){\n        const step = steps[i];\n        if (step.action === \"complete\") continue;\n        // Find the nodes corresponding to the clusters being merged\n        let node1 = null;\n        let node2 = null;\n        let node1Key = \"\";\n        let node2Key = \"\";\n        // Search for nodes that contain the points from the clusters\n        for (const [key, node] of Array.from(activeNodes.entries())){\n            if (node.indices && step.cluster1.length > 0) {\n                // Check if this node contains any point from cluster1\n                const hasCluster1Point = step.cluster1.some((pointIdx)=>node.indices?.includes(pointIdx));\n                if (hasCluster1Point && !node1) {\n                    node1 = node;\n                    node1Key = key;\n                }\n            }\n            if (node.indices && step.cluster2.length > 0) {\n                // Check if this node contains any point from cluster2\n                const hasCluster2Point = step.cluster2.some((pointIdx)=>node.indices?.includes(pointIdx));\n                if (hasCluster2Point && !node2) {\n                    node2 = node;\n                    node2Key = key;\n                }\n            }\n        }\n        if (node1 && node2 && node1Key !== node2Key) {\n            // Create new merged node\n            const mergedNode = {\n                left: node1,\n                right: node2,\n                height: step.distance,\n                indices: step.mergedCluster\n            };\n            // Remove old nodes and add new one\n            activeNodes.delete(node1Key);\n            activeNodes.delete(node2Key);\n            activeNodes.set(`merge_${i}`, mergedNode);\n        }\n    }\n    // Return the root node (should be the only remaining node)\n    const rootNodes = Array.from(activeNodes.values());\n    const rootNode = rootNodes.length > 0 ? rootNodes[0] : null;\n    // Ensure all points are represented in the tree\n    if (rootNode) {\n        const allPointIds = new Set();\n        const collectAllLabels = (node)=>{\n            if (node.label) {\n                allPointIds.add(node.label);\n            }\n            if (node.left) collectAllLabels(node.left);\n            if (node.right) collectAllLabels(node.right);\n        };\n        collectAllLabels(rootNode);\n        // If any points are missing, create a simple tree that includes them all\n        const missingPoints = points.filter((p)=>!allPointIds.has(p.id));\n        if (missingPoints.length > 0) {\n            // Create a simple balanced tree with all points\n            const allLeafNodes = points.map((p, idx)=>({\n                    height: 0,\n                    label: p.id,\n                    indices: [\n                        idx\n                    ]\n                }));\n            return buildBalancedTree(allLeafNodes, 0);\n        }\n    }\n    return rootNode;\n}\n// Helper function to build a balanced tree from leaf nodes\nfunction buildBalancedTree(leafNodes, startHeight) {\n    if (leafNodes.length === 1) {\n        return leafNodes[0];\n    }\n    if (leafNodes.length === 2) {\n        return {\n            left: leafNodes[0],\n            right: leafNodes[1],\n            height: startHeight + 1,\n            indices: [\n                ...leafNodes[0].indices || [],\n                ...leafNodes[1].indices || []\n            ]\n        };\n    }\n    const mid = Math.floor(leafNodes.length / 2);\n    const left = buildBalancedTree(leafNodes.slice(0, mid), startHeight + 1);\n    const right = buildBalancedTree(leafNodes.slice(mid), startHeight + 1);\n    return {\n        left,\n        right,\n        height: startHeight + 1,\n        indices: [\n            ...left.indices || [],\n            ...right.indices || []\n        ]\n    };\n}\n// Build dendrogram tree for divisive clustering\nfunction buildDivisiveDendrogram(steps, points) {\n    if (steps.length === 0) return null;\n    // Start with root node containing all points\n    const rootNode = {\n        height: 0,\n        indices: Array.from({\n            length: points.length\n        }, (_, i)=>i)\n    };\n    // Process division steps to build the tree\n    const nodeMap = new Map();\n    nodeMap.set(\"root\", rootNode);\n    for(let i = 1; i < steps.length - 1; i++){\n        const step = steps[i];\n        if (step.action === \"complete\") continue;\n        // Find the node to split\n        const nodeToSplit = Array.from(nodeMap.values()).find((node)=>node.indices && step.mergedCluster.length > 0 && node.indices.includes(step.mergedCluster[0]));\n        if (nodeToSplit) {\n            // Create child nodes\n            const leftNode = {\n                height: step.distance,\n                indices: step.cluster1\n            };\n            const rightNode = {\n                height: step.distance,\n                indices: step.cluster2\n            };\n            // Update the parent node\n            nodeToSplit.left = leftNode;\n            nodeToSplit.right = rightNode;\n            nodeToSplit.height = step.distance;\n            // Add child nodes to map\n            nodeMap.set(`left_${i}`, leftNode);\n            nodeMap.set(`right_${i}`, rightNode);\n        }\n    }\n    // Add leaf nodes for individual points\n    const addLeafNodes = (node)=>{\n        if (node.indices && node.indices.length === 1) {\n            const pointIdx = node.indices[0];\n            node.label = points[pointIdx]?.id;\n            node.height = 0;\n        } else {\n            if (node.left) addLeafNodes(node.left);\n            if (node.right) addLeafNodes(node.right);\n        }\n    };\n    addLeafNodes(rootNode);\n    // Ensure all points are represented as leaf nodes\n    const allPointIds = new Set();\n    const collectLeafLabels = (node)=>{\n        if (node.label) {\n            allPointIds.add(node.label);\n        } else {\n            if (node.left) collectLeafLabels(node.left);\n            if (node.right) collectLeafLabels(node.right);\n        }\n    };\n    collectLeafLabels(rootNode);\n    // If any points are missing, create a complete tree with all points\n    const missingPoints = points.filter((p)=>!allPointIds.has(p.id));\n    if (missingPoints.length > 0) {\n        // Create a simple balanced tree with all points\n        const allLeafNodes = points.map((p, idx)=>({\n                height: 0,\n                label: p.id,\n                indices: [\n                    idx\n                ]\n            }));\n        return buildBalancedTree(allLeafNodes, 0);\n    }\n    return rootNode;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/clustering.ts\n");

/***/ }),

/***/ "(rsc)/./shared/schema.ts":
/*!**************************!*\
  !*** ./shared/schema.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clusterRequestSchema: () => (/* binding */ clusterRequestSchema),\n/* harmony export */   clusterResponseSchema: () => (/* binding */ clusterResponseSchema),\n/* harmony export */   crimeSiteSchema: () => (/* binding */ crimeSiteSchema),\n/* harmony export */   customerSchema: () => (/* binding */ customerSchema),\n/* harmony export */   medicalPatientSchema: () => (/* binding */ medicalPatientSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\n// Medical Patient Dataset\nconst medicalPatientSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    Patient_ID: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Age: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Temperature_F: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Blood_Pressure_Sys: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Blood_Pressure_Dia: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Sugar_Level_mg_dL: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Symptoms: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\n// Crime Site Dataset\nconst crimeSiteSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    Crime_ID: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Latitude: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Longitude: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Crime_Type: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Time_of_Day: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Severity_Level: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Reported_By: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\n// Customer Segmentation Dataset\nconst customerSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    Customer_ID: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Age: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Annual_Income_kUSD: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Spending_Score: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Loyalty_Years: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    Preferred_Category: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\n// Clustering Request/Response\nconst clusterRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    dataset: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"medical\",\n        \"crime\",\n        \"customer\"\n    ]),\n    algorithm: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"agglomerative\",\n        \"divisive\"\n    ]),\n    dataPoints: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        x: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n        y: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n        data: zod__WEBPACK_IMPORTED_MODULE_0__.z.any()\n    })),\n    numClusters: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n});\nconst clusterResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    steps: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n    finalClusters: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.number())),\n    dendrogram: zod__WEBPACK_IMPORTED_MODULE_0__.z.any()\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zaGFyZWQvc2NoZW1hLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF3QjtBQUV4QiwwQkFBMEI7QUFDbkIsTUFBTUMsdUJBQXVCRCxrQ0FBQ0EsQ0FBQ0UsTUFBTSxDQUFDO0lBQzNDQyxZQUFZSCxrQ0FBQ0EsQ0FBQ0ksTUFBTTtJQUNwQkMsS0FBS0wsa0NBQUNBLENBQUNNLE1BQU07SUFDYkMsZUFBZVAsa0NBQUNBLENBQUNNLE1BQU07SUFDdkJFLG9CQUFvQlIsa0NBQUNBLENBQUNNLE1BQU07SUFDNUJHLG9CQUFvQlQsa0NBQUNBLENBQUNNLE1BQU07SUFDNUJJLG1CQUFtQlYsa0NBQUNBLENBQUNNLE1BQU07SUFDM0JLLFVBQVVYLGtDQUFDQSxDQUFDSSxNQUFNO0FBQ3BCLEdBQUc7QUFJSCxxQkFBcUI7QUFDZCxNQUFNUSxrQkFBa0JaLGtDQUFDQSxDQUFDRSxNQUFNLENBQUM7SUFDdENXLFVBQVViLGtDQUFDQSxDQUFDSSxNQUFNO0lBQ2xCVSxVQUFVZCxrQ0FBQ0EsQ0FBQ00sTUFBTTtJQUNsQlMsV0FBV2Ysa0NBQUNBLENBQUNNLE1BQU07SUFDbkJVLFlBQVloQixrQ0FBQ0EsQ0FBQ0ksTUFBTTtJQUNwQmEsYUFBYWpCLGtDQUFDQSxDQUFDSSxNQUFNO0lBQ3JCYyxnQkFBZ0JsQixrQ0FBQ0EsQ0FBQ00sTUFBTTtJQUN4QmEsYUFBYW5CLGtDQUFDQSxDQUFDSSxNQUFNO0FBQ3ZCLEdBQUc7QUFJSCxnQ0FBZ0M7QUFDekIsTUFBTWdCLGlCQUFpQnBCLGtDQUFDQSxDQUFDRSxNQUFNLENBQUM7SUFDckNtQixhQUFhckIsa0NBQUNBLENBQUNJLE1BQU07SUFDckJDLEtBQUtMLGtDQUFDQSxDQUFDTSxNQUFNO0lBQ2JnQixvQkFBb0J0QixrQ0FBQ0EsQ0FBQ00sTUFBTTtJQUM1QmlCLGdCQUFnQnZCLGtDQUFDQSxDQUFDTSxNQUFNO0lBQ3hCa0IsZUFBZXhCLGtDQUFDQSxDQUFDTSxNQUFNO0lBQ3ZCbUIsb0JBQW9CekIsa0NBQUNBLENBQUNJLE1BQU07QUFDOUIsR0FBRztBQWlDSCw4QkFBOEI7QUFDdkIsTUFBTXNCLHVCQUF1QjFCLGtDQUFDQSxDQUFDRSxNQUFNLENBQUM7SUFDM0N5QixTQUFTM0Isa0NBQUNBLENBQUM0QixJQUFJLENBQUM7UUFBQztRQUFXO1FBQVM7S0FBVztJQUNoREMsV0FBVzdCLGtDQUFDQSxDQUFDNEIsSUFBSSxDQUFDO1FBQUM7UUFBaUI7S0FBVztJQUMvQ0UsWUFBWTlCLGtDQUFDQSxDQUFDK0IsS0FBSyxDQUFDL0Isa0NBQUNBLENBQUNFLE1BQU0sQ0FBQztRQUMzQjhCLEdBQUdoQyxrQ0FBQ0EsQ0FBQ00sTUFBTTtRQUNYMkIsR0FBR2pDLGtDQUFDQSxDQUFDTSxNQUFNO1FBQ1g0QixNQUFNbEMsa0NBQUNBLENBQUNtQyxHQUFHO0lBQ2I7SUFDQUMsYUFBYXBDLGtDQUFDQSxDQUFDTSxNQUFNLEdBQUcrQixRQUFRO0FBQ2xDLEdBQUc7QUFJSSxNQUFNQyx3QkFBd0J0QyxrQ0FBQ0EsQ0FBQ0UsTUFBTSxDQUFDO0lBQzVDcUMsT0FBT3ZDLGtDQUFDQSxDQUFDK0IsS0FBSyxDQUFDL0Isa0NBQUNBLENBQUNtQyxHQUFHO0lBQ3BCSyxlQUFleEMsa0NBQUNBLENBQUMrQixLQUFLLENBQUMvQixrQ0FBQ0EsQ0FBQytCLEtBQUssQ0FBQy9CLGtDQUFDQSxDQUFDTSxNQUFNO0lBQ3ZDbUMsWUFBWXpDLGtDQUFDQSxDQUFDbUMsR0FBRztBQUNuQixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGllcmFyY2hpY2FsLWNsdXN0ZXJpbmctdmlzdWFsaXphdGlvbi8uL3NoYXJlZC9zY2hlbWEudHM/MWI0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xyXG5cclxuLy8gTWVkaWNhbCBQYXRpZW50IERhdGFzZXRcclxuZXhwb3J0IGNvbnN0IG1lZGljYWxQYXRpZW50U2NoZW1hID0gei5vYmplY3Qoe1xyXG4gIFBhdGllbnRfSUQ6IHouc3RyaW5nKCksXHJcbiAgQWdlOiB6Lm51bWJlcigpLFxyXG4gIFRlbXBlcmF0dXJlX0Y6IHoubnVtYmVyKCksXHJcbiAgQmxvb2RfUHJlc3N1cmVfU3lzOiB6Lm51bWJlcigpLFxyXG4gIEJsb29kX1ByZXNzdXJlX0RpYTogei5udW1iZXIoKSxcclxuICBTdWdhcl9MZXZlbF9tZ19kTDogei5udW1iZXIoKSxcclxuICBTeW1wdG9tczogei5zdHJpbmcoKSxcclxufSk7XHJcblxyXG5leHBvcnQgdHlwZSBNZWRpY2FsUGF0aWVudCA9IHouaW5mZXI8dHlwZW9mIG1lZGljYWxQYXRpZW50U2NoZW1hPjtcclxuXHJcbi8vIENyaW1lIFNpdGUgRGF0YXNldFxyXG5leHBvcnQgY29uc3QgY3JpbWVTaXRlU2NoZW1hID0gei5vYmplY3Qoe1xyXG4gIENyaW1lX0lEOiB6LnN0cmluZygpLFxyXG4gIExhdGl0dWRlOiB6Lm51bWJlcigpLFxyXG4gIExvbmdpdHVkZTogei5udW1iZXIoKSxcclxuICBDcmltZV9UeXBlOiB6LnN0cmluZygpLFxyXG4gIFRpbWVfb2ZfRGF5OiB6LnN0cmluZygpLFxyXG4gIFNldmVyaXR5X0xldmVsOiB6Lm51bWJlcigpLFxyXG4gIFJlcG9ydGVkX0J5OiB6LnN0cmluZygpLFxyXG59KTtcclxuXHJcbmV4cG9ydCB0eXBlIENyaW1lU2l0ZSA9IHouaW5mZXI8dHlwZW9mIGNyaW1lU2l0ZVNjaGVtYT47XHJcblxyXG4vLyBDdXN0b21lciBTZWdtZW50YXRpb24gRGF0YXNldFxyXG5leHBvcnQgY29uc3QgY3VzdG9tZXJTY2hlbWEgPSB6Lm9iamVjdCh7XHJcbiAgQ3VzdG9tZXJfSUQ6IHouc3RyaW5nKCksXHJcbiAgQWdlOiB6Lm51bWJlcigpLFxyXG4gIEFubnVhbF9JbmNvbWVfa1VTRDogei5udW1iZXIoKSxcclxuICBTcGVuZGluZ19TY29yZTogei5udW1iZXIoKSxcclxuICBMb3lhbHR5X1llYXJzOiB6Lm51bWJlcigpLFxyXG4gIFByZWZlcnJlZF9DYXRlZ29yeTogei5zdHJpbmcoKSxcclxufSk7XHJcblxyXG5leHBvcnQgdHlwZSBDdXN0b21lciA9IHouaW5mZXI8dHlwZW9mIGN1c3RvbWVyU2NoZW1hPjtcclxuXHJcbi8vIEdlbmVyaWMgRGF0YSBQb2ludCBmb3Igc2NhdHRlciBwbG90XHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVBvaW50IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHg6IG51bWJlcjtcclxuICB5OiBudW1iZXI7XHJcbiAgZGF0YTogTWVkaWNhbFBhdGllbnQgfCBDcmltZVNpdGUgfCBDdXN0b21lcjtcclxuICBjbHVzdGVyPzogbnVtYmVyO1xyXG4gIGlzTmV3PzogYm9vbGVhbjtcclxufVxyXG5cclxuLy8gQ2x1c3RlcmluZyBTdGVwIGZvciBhbmltYXRpb25cclxuZXhwb3J0IGludGVyZmFjZSBDbHVzdGVyU3RlcCB7XHJcbiAgc3RlcE51bWJlcjogbnVtYmVyO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgY29ubmVjdGVkUGFpcnM/OiBBcnJheTxbbnVtYmVyLCBudW1iZXJdPjsgLy8gaW5kaWNlcyBvZiBwb2ludHMgYmVpbmcgY29ubmVjdGVkXHJcbiAgbWVyZ2VkQ2x1c3RlcnM/OiBBcnJheTxudW1iZXJbXT47IC8vIGFycmF5cyBvZiBwb2ludCBpbmRpY2VzIGluIGVhY2ggY2x1c3RlclxyXG4gIGRlbmRyb2dyYW1IZWlnaHQ/OiBudW1iZXI7XHJcbiAgYWN0aW9uOiAnY29ubmVjdCcgfCAnbWVyZ2UnIHwgJ2NvbXBsZXRlJztcclxufVxyXG5cclxuLy8gQ2x1c3RlciBJbmZvIGZvciB0b29sdGlwc1xyXG5leHBvcnQgaW50ZXJmYWNlIENsdXN0ZXJJbmZvIHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHBvaW50SW5kaWNlczogbnVtYmVyW107XHJcbiAgY29sb3I6IHN0cmluZztcclxuICBzdGF0czogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcclxuICBkaWFnbm9zaXM/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8vIENsdXN0ZXJpbmcgUmVxdWVzdC9SZXNwb25zZVxyXG5leHBvcnQgY29uc3QgY2x1c3RlclJlcXVlc3RTY2hlbWEgPSB6Lm9iamVjdCh7XHJcbiAgZGF0YXNldDogei5lbnVtKFsnbWVkaWNhbCcsICdjcmltZScsICdjdXN0b21lciddKSxcclxuICBhbGdvcml0aG06IHouZW51bShbJ2FnZ2xvbWVyYXRpdmUnLCAnZGl2aXNpdmUnXSksXHJcbiAgZGF0YVBvaW50czogei5hcnJheSh6Lm9iamVjdCh7XHJcbiAgICB4OiB6Lm51bWJlcigpLFxyXG4gICAgeTogei5udW1iZXIoKSxcclxuICAgIGRhdGE6IHouYW55KCksXHJcbiAgfSkpLFxyXG4gIG51bUNsdXN0ZXJzOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXHJcbn0pO1xyXG5cclxuZXhwb3J0IHR5cGUgQ2x1c3RlclJlcXVlc3QgPSB6LmluZmVyPHR5cGVvZiBjbHVzdGVyUmVxdWVzdFNjaGVtYT47XHJcblxyXG5leHBvcnQgY29uc3QgY2x1c3RlclJlc3BvbnNlU2NoZW1hID0gei5vYmplY3Qoe1xyXG4gIHN0ZXBzOiB6LmFycmF5KHouYW55KCkpLFxyXG4gIGZpbmFsQ2x1c3RlcnM6IHouYXJyYXkoei5hcnJheSh6Lm51bWJlcigpKSksXHJcbiAgZGVuZHJvZ3JhbTogei5hbnkoKSxcclxufSk7XHJcblxyXG5leHBvcnQgdHlwZSBDbHVzdGVyUmVzcG9uc2UgPSB6LmluZmVyPHR5cGVvZiBjbHVzdGVyUmVzcG9uc2VTY2hlbWE+O1xyXG5cclxuLy8gRGF0YXNldCBjb25maWd1cmF0aW9uXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YXNldENvbmZpZyB7XHJcbiAgaWQ6ICdtZWRpY2FsJyB8ICdjcmltZScgfCAnY3VzdG9tZXInO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBpY29uOiBzdHJpbmc7XHJcbiAgeEF4aXM6IHsgbGFiZWw6IHN0cmluZzsga2V5OiBzdHJpbmcgfTtcclxuICB5QXhpczogeyBsYWJlbDogc3RyaW5nOyBrZXk6IHN0cmluZyB9O1xyXG4gIGF2YWlsYWJsZUF4ZXM/OiBBcnJheTx7IGxhYmVsOiBzdHJpbmc7IGtleTogc3RyaW5nOyByYW5nZTogW251bWJlciwgbnVtYmVyXSB9PjtcclxuICB0b29sdGlwRmllbGRzOiBBcnJheTx7IGxhYmVsOiBzdHJpbmc7IGtleTogc3RyaW5nOyBmb3JtYXQ/OiAodmFsOiBudW1iZXIsIGRhdGE/OiBhbnkpID0+IHN0cmluZyB9PjtcclxuICBjbHVzdGVyQ29sb3JzOiBzdHJpbmdbXTtcclxuICBnZXREaWFnbm9zaXM/OiAoc3RhdHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4pID0+IHN0cmluZztcclxuICBnZXRTdG9yeVN0ZXA/OiAoc3RlcDogbnVtYmVyLCBhbGdvcml0aG06ICdhZ2dsb21lcmF0aXZlJyB8ICdkaXZpc2l2ZScpID0+IHN0cmluZztcclxufVxyXG4iXSwibmFtZXMiOlsieiIsIm1lZGljYWxQYXRpZW50U2NoZW1hIiwib2JqZWN0IiwiUGF0aWVudF9JRCIsInN0cmluZyIsIkFnZSIsIm51bWJlciIsIlRlbXBlcmF0dXJlX0YiLCJCbG9vZF9QcmVzc3VyZV9TeXMiLCJCbG9vZF9QcmVzc3VyZV9EaWEiLCJTdWdhcl9MZXZlbF9tZ19kTCIsIlN5bXB0b21zIiwiY3JpbWVTaXRlU2NoZW1hIiwiQ3JpbWVfSUQiLCJMYXRpdHVkZSIsIkxvbmdpdHVkZSIsIkNyaW1lX1R5cGUiLCJUaW1lX29mX0RheSIsIlNldmVyaXR5X0xldmVsIiwiUmVwb3J0ZWRfQnkiLCJjdXN0b21lclNjaGVtYSIsIkN1c3RvbWVyX0lEIiwiQW5udWFsX0luY29tZV9rVVNEIiwiU3BlbmRpbmdfU2NvcmUiLCJMb3lhbHR5X1llYXJzIiwiUHJlZmVycmVkX0NhdGVnb3J5IiwiY2x1c3RlclJlcXVlc3RTY2hlbWEiLCJkYXRhc2V0IiwiZW51bSIsImFsZ29yaXRobSIsImRhdGFQb2ludHMiLCJhcnJheSIsIngiLCJ5IiwiZGF0YSIsImFueSIsIm51bUNsdXN0ZXJzIiwib3B0aW9uYWwiLCJjbHVzdGVyUmVzcG9uc2VTY2hlbWEiLCJzdGVwcyIsImZpbmFsQ2x1c3RlcnMiLCJkZW5kcm9ncmFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./shared/schema.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcluster%2Froute&page=%2Fapi%2Fcluster%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcluster%2Froute.ts&appDir=C%3A%5CUsers%5CSANJAY%5CDownloads%5CDharmik%5CDHV%5CDHV-project-2%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CSANJAY%5CDownloads%5CDharmik%5CDHV%5CDHV-project-2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();